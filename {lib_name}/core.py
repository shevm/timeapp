# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['Timeapp']

# Cell
import numpy as np
import pandas as pd
import ipywidgets as w

import datetime as dt

from functools import partial

# Cell

class Timeapp:
    def __init__(self, tasks):
        self.tasks = tasks
        self.n_rows = len(tasks)
        self.n_cols = 4
        self.app = w.AppLayout(header=None,
                               left_sidebar=None,
                               center=None,
                               right_sidebar=None,
                               footer=None)
        self._app_setup()

    def _app_setup(self):
        self.app.header = w.HTML('<h1>Timeapp</h1>')
        self.app.left_sidebar = None

        self.app.center = w.GridspecLayout(self.n_rows, self.n_cols, height='auto')
        task_labels = [w.Label(o) for o in tasks]
        self._set_column(0, task_labels, value=False)
        task_values = [w.Label(str(o)) for o in np.zeros(self.n_rows, dtype=np.int32)]
        self._set_column(1, task_values, value=False)

        self.app.footer = w.DatePicker(value=dt.date.today())

        self._create_buttons(mins=15)

    def _get_grid_object(self, row, col):
        return self.app.center[row, col]

    def _set_grid_object(self, row, col, item):
        self.app.center[row, col] = item

    def _get_grid_value(self, row, col):
        return self.app.center[row, col].value

    def _set_grid_value(self, row, col, value):
        self.app.center[row, col].value = value

    def _get_column(self, column, value=True):
        if value:
            items = [self._get_grid_value(i, column) for i in range(self.n_rows)]
        else:
            items = [self._get_grid_object(i, column) for i in range(self.n_rows)]
        return items

    def _set_column(self, column, items, value=True):
        if value:
            for i in range(self.n_rows):
                self._set_grid_value(i, column, items[i])
        else:
            for i in range(self.n_rows):
                self._set_grid_object(i, column, items[i])

    def _handle_update_time(self, b, row, mins):
        curr_value = int(self._get_grid_value(row, 1))
        self._set_grid_value(row, 1, str(curr_value + mins))

    @staticmethod
    def _create_expanded_button(description, **kwargs):
        return w.Button(description=description, layout=w.Layout(height='auto', width='auto'), **kwargs)

    def _create_buttons(self, mins=15):
        plus_buttons = [self._create_expanded_button(description=str(mins), icon='plus') for i in range(self.n_rows)]
        plus_time_handlers = [partial(self._handle_update_time, row=i, mins=mins) for i in range(self.n_rows)]
        for i, o in enumerate(plus_buttons):
            o.on_click(plus_time_handlers[i])
        self._set_column(2, plus_buttons, value=False)

        minus_buttons = [self._create_expanded_button(description=str(mins), icon='minus') for i in range(self.n_rows)]
        minus_time_handlers = [partial(self._handle_update_time, row=i, mins=-mins) for i in range(self.n_rows)]
        for i, o in enumerate(minus_buttons):
            o.on_click(minus_time_handlers[i])
        self._set_column(3, minus_buttons, value=False)

    def to_df(self):
        tasks = self._get_column(0)
        vals = self._get_column(1)
        return pd.DataFrame({'tasks': tasks, 'time': vals}, index=[self.app.footer.value] * self.n_rows)